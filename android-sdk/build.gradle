apply plugin: 'com.android.library'

// =================================================================================================
// VARIABLES FOR BINTRAY
// =================================================================================================
ext {
    bintrayRepo = 'maven'
    bintrayName = 'android-sdk'

    publishedGroupId = 'com.blueshift'
    libraryName = 'Blueshift Android SDK'
    artifact = 'android-sdk'

    libraryDescription = 'Blueshift Android SDK to make it easier for marketers to integrate their mobile app with Blueshiftâ€™s near real-time event processing platform and send personalized rich push notifications to their customers.'

    siteUrl = 'https://getblueshift.com/'
    gitUrl = 'https://github.com/blueshift-labs/Blueshift-Android-SDK.git'

    libraryVersion = '1.0.9.b1'

    developerId = 'nipun'
    developerName = 'Nipun Bhatia'
    developerEmail = 'nipun@getblueshift.com'

    licenseName = 'MIT'
    licenseUrl = 'https://opensource.org/licenses/MIT'
    allLicenses = ["MIT"]
}

// =================================================================================================
// ANDROID
// =================================================================================================
android {
    compileSdkVersion 25
    buildToolsVersion "23.0.3"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        buildConfigField 'String', 'SDK_VERSION',  "\"$libraryVersion\""
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    compile 'com.android.support:appcompat-v7:25.1.0'
    // for Android Advertising Id
    compile 'com.google.android.gms:play-services-ads:10.2.0'
    // for JSON parsing
    compile 'com.google.code.gson:gson:2.6.1'
    // for annotations used (ex @NotNull)
    compile 'org.jetbrains:annotations:13.0'
    // for FCM
    compile 'com.google.firebase:firebase-messaging:10.2.0'

    testCompile 'junit:junit:4.12'
}

// =================================================================================================
// BINTRAY - The values are taken from ext {} block above. Edit that section when changes comes.
// =================================================================================================

// ********** Maven Install **********

apply plugin: 'com.github.dcendents.android-maven'

group = publishedGroupId                               // Maven Group ID for the artifact

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                groupId publishedGroupId
                artifactId artifact

                // Add your description here
                name libraryName
                description libraryDescription
                url siteUrl

                // Set your license
                licenses {
                    license {
                        name licenseName
                        url licenseUrl
                    }
                }
                developers {
                    developer {
                        id developerId
                        name developerName
                        email developerEmail
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl

                }
            }
        }
    }
}

// ********** Bintray Upload **********

apply plugin: 'com.jfrog.bintray'

version = libraryVersion

if (project.hasProperty("android")) { // Android libraries
    task sourcesJar(type: Jar) {
        from android.sourceSets.main.java.srcDirs
        classifier = 'sources'
    }

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        // todo: remove below line when fixes are applied for excluding external aars for javadoc.
        // failOnError = false;
    }
} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        from sourceSets.main.allSource
        classifier = 'sources'
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

// Bintray
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = bintrayName
        desc = libraryDescription
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        publish = true
        publicDownloadNumbers = true
        version {
            desc = libraryDescription
            gpg {
                sign = true // Determines whether to GPG sign the files. The default is false
                passphrase = properties.getProperty("bintray.gpg.password")
                // Optional. The passphrase for GPG signing'
            }
        }
    }
}
